------------------------------pom.xml-------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>xmlIOCexample</artifactId>
    <version>1.0-SNAPSHOT</version>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>6</source>
                    <target>6</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <packaging>jar</packaging>
    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>5.2.5.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.48</version>
        </dependency>
        <dependency>
            <groupId>commons-dbutils</groupId>
            <artifactId>commons-dbutils</artifactId>
            <version>1.4</version>
        </dependency>
        <dependency>
            <groupId>c3p0</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.1.2</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13</version>
            <scope>test</scope>
        </dependency>
<!--        spring整合junit需要导入的jar(坐标)-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>5.0.2.RELEASE</version>
        </dependency>
    </dependencies>
</project>
------------------------------IAccountService.java-------------------------------
package org.example.service;

import org.example.entity.Account;

import java.util.List;
//账户的业务层接口
public interface IAccountService {
//    查询所有
    List<Account> findAllAccount();
//    查询一个
    Account findAccountById(Integer accountId);
//    保存
    void saveAccount(Account account);
//    更新
    void updateAccount(Account account);
//    删除
    void deleteAccount(Integer accountId);
}
------------------------------AccountServiceImpl.java-------------------------------
package org.example.service.impl;

import org.example.dao.IAccountDao;
import org.example.entity.Account;
import org.example.service.IAccountService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
//账户业务层的实现类,注入持久层对象,用持久层去调用方法
@Service("accountService")
public class AccountServiceImpl implements IAccountService {
    @Autowired
    private IAccountDao accountDao;

    //查询所有
    @Override
    public List<Account> findAllAccount() {
        return accountDao.findAllAccount();
    }

    //查询一个
    @Override
    public Account findAccountById(Integer accountId) {
        return accountDao.findAccountById(accountId);
    }

    //保存
    @Override
    public void saveAccount(Account account) {
        accountDao.saveAccount(account);
    }

    //更新
    @Override
    public void updateAccount(Account account) {
        accountDao.updateAccount(account);
    }

    //删除
    @Override
    public void deleteAccount(Integer accountId) {
        accountDao.deleteAccount(accountId);
    }
}
------------------------------Account.java-------------------------------
package org.example.entity;

import java.io.Serializable;
//账户的实体类
public class Account implements Serializable {
    private Integer id;
    private String name;
    private Float money;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Float getMoney() {
        return money;
    }

    public void setMoney(Float money) {
        this.money = money;
    }

    @Override
    public String toString() {
        return "Account{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", money=" + money +
                '}';
    }
}
------------------------------IAccountDao.java-------------------------------
package org.example.dao;

import org.example.entity.Account;
import java.util.List;
//账户的持久层接口
public interface IAccountDao {
    //    查询所有
    List<Account> findAllAccount();
    //    查询一个
    Account findAccountById(Integer accountId);
    //    保存
    void saveAccount(Account account);
    //    更新
    void updateAccount(Account account);
    //    删除
    void deleteAccount(Integer accountId);
}
------------------------------AccountDaoImpl.java-------------------------------
package org.example.dao.impl;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;
import org.example.dao.IAccountDao;
import org.example.entity.Account;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.List;
//账户的持久层实现类,注入runner对象帮助我们实现
@Repository("accountDao")
public class AccountDaoImpl implements IAccountDao {
    @Autowired
    private QueryRunner runner;

    @Override
    public List<Account> findAllAccount() {
        try {
            return runner.query("select * from account", new BeanListHandler<Account>(Account.class));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public Account findAccountById(Integer accountId) {
        try {
            return runner.query("select * from account where id=?", new BeanHandler<Account>(Account.class),accountId);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void saveAccount(Account account) {
        try {
            runner.update("insert into account(name,money) values (?,?)", account.getName(), account.getMoney());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void updateAccount(Account account) {
        try {
            runner.update("update account set name=?,money=? where id=?", account.getName(), account.getMoney(), account.getId());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void deleteAccount(Integer accountId) {
        try {
            runner.update("delete from account where id=?",accountId);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
------------------------------SpringConfig.java-------------------------------
package config;

import com.mchange.v2.c3p0.ComboPooledDataSource;
import org.apache.commons.dbutils.QueryRunner;
import org.springframework.context.annotation.*;

import javax.sql.DataSource;

/*
 * 该类是一个配置类，它的作用和bean.xml是一样的
 * spring中的新注解
 * Configuration作用：指定当前类是一个配置类
 *              细节：当配置类作为AnnotationConfigApplicationContext对象创建的参数时，把它的class字节码文件放在了参数位置上，该注解可以不写。
 * ComponentScan作用：用于通过注解指定spring在创建容器时要扫描的包
 *              属性：value和basePackages作用是一样的，都是指定创建容器时要扫描的包
 *              我们使用此注解就等同于在xml中配置了<context:component-scan base-package="org.example"></context:component-scan>
 * Bean作用：把当前方法的返回值作为bean对象存入spring的ioc容器中
 *     属性：name用于指定bean的id。默认值是当前方法的名称
 *     细节：当我们使用注解配置方法时，如果方法有参数，spring容器会去容器中查找有没有可用的bean对象，
 *           查找的方式和Autowired是一样的(即自动按照类型注入，如果有唯一一个直接注入，如果没有再按照名称注入)
 * Import作用：用于导入其他的配置类
 * PropertySource作用：用于指定properties文件的位置
 *               属性：value用于指定文件的名称和路径
 *                     关键字classpath:表示在类路径下
 * */
//@Configuration
@ComponentScan({"org.example"})
@Import(JdbcConfig.class)
@PropertySource("classpath:jdbcConfig.properties")
public class SpringConfig {

}
------------------------------JdbcConfig.java-------------------------------
package config;

import com.mchange.v2.c3p0.ComboPooledDataSource;
import org.apache.commons.dbutils.QueryRunner;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;

import javax.sql.DataSource;
//和spring连接数据库相关的配置类
//@Configuration
public class JdbcConfig {
    @Value("${jdbc.driver}")
    private String driver;
    @Value("${jdbc.url}")
    private String url;
    @Value("${jdbc.username}")
    private String username;
    @Value("${jdbc.password}")
    private String password;
    @Bean(name="runner")
    @Scope(value = "prototype")
    public QueryRunner createQueryRunner(DataSource dataSource){
        return new QueryRunner(dataSource);
    }
    @Bean(name="dataSource")
    public DataSource createDataSource() {
        try{
            ComboPooledDataSource ds = new ComboPooledDataSource();
            ds.setDriverClass(driver);
            ds.setJdbcUrl(url);
            ds.setUser(username);
            ds.setPassword(password);
            return ds;
        }catch(Exception e){
            throw new RuntimeException();
        }
    }
}
------------------------------jdbcConfig.properties-------------------------------
jdbc.driver=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/mydb
jdbc.username=root
jdbc.password=zs0922
------------------------------testService.java-------------------------------
package org.example.test;


import config.SpringConfig;
import org.example.entity.Account;
import org.example.service.IAccountService;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import java.util.List;
/*
* 使用junit单元测试，测试我们的配置
* Spring整合junit的配置
*       1、导入spring整合junit的jar（坐标）
*       2、使用junit提供的一个注解把原有的main方法替换了，替换成spring提供的
*           @Runwith
*       3、告知spring的运行器，spring和ioc创建是基于xml还是注解的，并且说明位置
*           @ContextConfiguration
*               locations:指定xml文件的位置，加上classpath关键字，表示在类路径下
*               classes：指定注解类所在位置
*       细节：当使用spring5.x版本的时候，要求junit的jar包必须是4.1.2及以上
* */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = SpringConfig.class)
public class testService {
    @Autowired
    private IAccountService accountService;
    @Test
    public void testFindAll() {
//        //1.创建容器
//        ApplicationContext ac= new AnnotationConfigApplicationContext(SpringConfig.class);
//        //2.获取对象
//        IAccountService accountService= (IAccountService) ac.getBean("accountService");
        //3.执行方法
        List<Account> accounts=accountService.findAllAccount();
        for (Account account:accounts){
            System.out.println(account);
        }
    }
    @Test
    public void testFindOne() {
        //3.执行方法
        Account account = new Account();
        account = accountService.findAccountById(1);
        System.out.println(account);
    }
    @Test
    public void testSave() {
        //3.执行方法
        Account account = new Account();
        account.setName("save");
        account.setMoney((float) 1000.0);
        accountService.saveAccount(account);
    }
    @Test
    public void testUpdate() {
        //3.执行方法
        Account account=new Account();
        account.setId(4);
        account.setName("update");
        account.setMoney((float) 500);
        accountService.updateAccount(account);
    }
    @Test
    public void testDelete() {
        //3.执行方法
        accountService.deleteAccount(4);
    }
}
