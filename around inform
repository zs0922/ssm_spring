------------------------------------pom.xml-------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>springAOP</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>5.2.5.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>
    </dependencies>
</project>
------------------------------------IAccountService.java-------------------------------------
package org.example.service;
//账户的业务层接口
public interface IAccountService {
    void saveAccount();
}
------------------------------------AccountServiceImpl.java-------------------------------------
package org.example.service.impl;

import org.example.service.IAccountService;
//账户的业务层实现类
public class AccountServiceImpl implements IAccountService {
    public void saveAccount() {
        System.out.println("执行了保存");
//        int i=1/0;
    }
}
------------------------------------Logger.java-------------------------------------
package org.example.utils;

import org.aspectj.lang.ProceedingJoinPoint;

//用于记录日志的工具类，它里面提供了公共的代码
public class Logger {
    /*
    * 环绕通知  问题：配置了环绕通知后切入点方法没有执行，而通知方法执行了
    *          分析：通过对比动态代理中的环绕通知代码，发现动态代理的环绕通知有明确的切入点方法调用
    *          解决：Spring框架为我们提供了一个接口：ProceedingJoinPoint。该接口有一个方法proceed()，此方法就相当于明确调用切入点方法
    *                该接口可以作为环绕通知的方法参数，在程序执行时，spring框架会为我们提供该接口的实现类供我们使用。
    * Spring中的环绕通知：它是spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式
    * */
    public Object aroundLog(ProceedingJoinPoint pjp){
        Object rtValue=null;
        try{
            Object[] args=pjp.getArgs();//得到方法执行所需的参数
            System.out.println("Logger类中的beforeLog方法执行了....前置");
            rtValue=pjp.proceed(args);//明确调用业务层方法(切入点方法)
            System.out.println("Logger类中的printLog方法执行了...后置");
            return rtValue;
        }catch(Throwable t){
            System.out.println("Logger类中的exceptionLog方法执行了...异常");
            throw new RuntimeException(t);
        }finally {
            System.out.println("Logger类中的afterLog方法执行了...最终");
        }
    }
}
------------------------------------bean.xml-------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
<!--配置spring的Ioc-->
<!--    注入accountService对象-->
    <bean id="accountService" class="org.example.service.impl.AccountServiceImpl"></bean>
<!--    配置Logger类-->
    <bean id="logger" class="org.example.utils.Logger"></bean>
<!--    配置AOP-->
    <aop:config>
        <aop:pointcut id="pt1" expression="execution(void org.example.service.impl.AccountServiceImpl.saveAccount())"/>
        <aop:aspect id="logAdvice" ref="logger">
<!--        配置切入点表达式，id属性是唯一标识，expression属性用于指定表达式内容
                此标签写在aop:aspect标签内部表示只能当前切面使用；
                它还可以写在aop:aspect标签外部表所有切面可用。但必须写在aop:config标签内部的最前面
-->
            <aop:around method="aroundLog" pointcut-ref="pt"></aop:around>
            <aop:pointcut id="pt" expression="execution(void org.example.service.impl.AccountServiceImpl.saveAccount())"/>
        </aop:aspect>
    </aop:config>
</beans>
------------------------------------test.java-------------------------------------
package org.example;

import org.example.service.IAccountService;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

//测试AOP的配置
public class test {
    public static void main(String[] args) {
        //1.获取容器
        ApplicationContext ac=new ClassPathXmlApplicationContext("bean.xml");
        //2.获取对象
        IAccountService accountService=ac.getBean("accountService",IAccountService.class);
        //3.执行方法
        accountService.saveAccount();
    }
}
