-------------------------------------pom.xml-------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>springAOP</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>5.2.5.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>
    </dependencies>
</project>
-------------------------------------IAccountService.java-------------------------------------
package org.example.service;
//账户的业务层接口
public interface IAccountService {
    void saveAccount();
    void updateAccount(int i);
    int deleteAccount();
}
-------------------------------------AccountServiceImpl.java-------------------------------------
package org.example.service.impl;

import org.example.service.IAccountService;
//账户的业务层实现类
public class AccountServiceImpl implements IAccountService {
    public void saveAccount() {
        System.out.println("执行了保存");
    }

    public void updateAccount(int i) {
        System.out.println("执行了更新"+i);
    }

    public int deleteAccount() {
        System.out.println("执行了删除");
        return 0;
    }
}
-------------------------------------Logger.java-------------------------------------
package org.example.utils;
//用于记录日志的工具类，它里面提供了公共的代码
public class Logger {
//    用于打印日志。计划让其在切入点方法执行之前执行（切入点方法就是业务层方法）
    public void printLog(){
        System.out.println("Logger类中的方法执行了");
    }
}
-------------------------------------bean.xml-------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
<!--配置spring的Ioc-->
<!--    注入accountService对象-->
    <bean id="accountService" class="org.example.service.impl.AccountServiceImpl"></bean>
<!--    spring中基于XML的AOP配置步骤
        1.把通知bean也交给spring来管理
        2.使用aop：config标签表明开始AOP的配置
        3.使用aop：aspect标签表明配置切面
                   id属性：是给切面提供一个唯一标识
                   ref属性：是指定通知类bean的id
        4.在aop：aspect标签的内部使用对应标签来配置通知的类型
                 现在示例是让printLog方法在切入点方法执行之前，所以是前置通知
                 aop:before  表示配置前置通知
                     method属性：用于指定Logger类中哪个方法是前置通知
                     pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强
                 切入点表达式的写法：
                     关键字：execution(表达式)
                     表达式：访问修饰符  返回值  包名.包名...包名.类名.方法名(参数列表)
                     表达式写法实例：                     public void org.example.service.impl.AccountServiceImpl.saveAccount()
                     访问修饰符可以省略：                 void org.example.service.impl.AccountServiceImpl.saveAccount()
                     返回值可以使用通配符，表示任意返回值：* org.example.service.impl.AccountServiceImpl.saveAccount()
                     包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.：
                                                         * *.*.*.*.AccountServiceImpl.saveAccount()
                     包名可以使用..表示当前包及其子包：    * *..AccountServiceImpl.saveAccount()
                     类名和方法名都可以使用*来实现通配：   * *..*.*()
                     参数列表：可以直接写数据类型：基本类型直接写名称，引用类型写包名.类名的方式：java.lang.String
                     可以使用通配符表示任意类型，但是必须有参数；可以使用..表示有无参数均可，有参数可以是任意类型
                     全通配写法：* *..*.*(..)

                     实际开发中切入点表达式的通常写法：
                        切到业务层实现类下的所有方法
                            * org.example.service.impl.*.*(..)
                     -->
<!--    配置Logger类-->
    <bean id="logger" class="org.example.utils.Logger"></bean>
<!--    配置AOP-->
    <aop:config>
        <aop:aspect id="logAdvice" ref="logger">
            <aop:before method="printLog" pointcut="execution(* org.example.service.impl.*.*(..))"></aop:before>
        </aop:aspect>
    </aop:config>
</beans>
-------------------------------------test.java-------------------------------------
package org.example;

import org.example.service.IAccountService;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

//测试AOP的配置
public class test {
    public static void main(String[] args) {
        //1.获取容器
        ApplicationContext ac=new ClassPathXmlApplicationContext("bean.xml");
        //2.获取对象
        IAccountService accountService=ac.getBean("accountService",IAccountService.class);
        //3.执行方法
        accountService.saveAccount();
        accountService.updateAccount(1);
        accountService.deleteAccount();
    }
}
