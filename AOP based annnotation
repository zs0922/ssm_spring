--------------------------------pom.xml--------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>annotationAOP</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>5.2.5.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>
    </dependencies>
</project>
--------------------------------IAccountService.java--------------------------------
package org.example.service;
//账户的业务层接口
public interface IAccountService {
    void saveAccount();
}
--------------------------------AccountServiceImpl.java--------------------------------
package org.example.service.impl;

import org.example.service.IAccountService;
import org.springframework.stereotype.Service;

//账户的业务层实现类
@Service("accountService")
public class AccountServiceImpl implements IAccountService {
    public void saveAccount() {
        System.out.println("执行了保存");
//        int i=1/0;
    }
}
--------------------------------Logger.java--------------------------------
package org.example.utils;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.*;
import org.springframework.stereotype.Component;

//用于记录日志的工具类，它里面提供了公共的代码
@Component("logger")
@Aspect//表示当前类是一个切面类
public class Logger {
    @Pointcut("execution(* org.example.service.impl.AccountServiceImpl.saveAccount())")
    private void pt(){}
//    @Before("pt()")
    public void beforeLog(){
        System.out.println("Logger类中的beforeLog方法执行了");
    }
//    @AfterReturning("pt()")
    public void printLog(){
        System.out.println("Logger类中的printLog方法执行了");
    }
//    @AfterThrowing("pt()")
    public void exceptionLog(){
        System.out.println("Logger类中的exceptionLog方法执行了");
    }
//    @After("pt()")
    public void afterLog(){
        System.out.println("Logger类中的afterLog方法执行了");
    }
    @Around("pt()")
    public Object aroundLog(ProceedingJoinPoint pjp){
        Object rtValue=null;
        try{
            Object[] args=pjp.getArgs();//得到方法执行所需的参数
            System.out.println("Logger类中的beforeLog方法执行了....前置");
            rtValue=pjp.proceed(args);//明确调用业务层方法(切入点方法)
            System.out.println("Logger类中的printLog方法执行了...后置");
            return rtValue;
        }catch(Throwable t){
            System.out.println("Logger类中的exceptionLog方法执行了...异常");
            throw new RuntimeException(t);
        }finally {
            System.out.println("Logger类中的afterLog方法执行了...最终");
        }
    }
}
--------------------------------bean.xml--------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:annotation-config/>
    <context:component-scan base-package="org.example"></context:component-scan>
<!--    配置spring开启注解AOP的支持-->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
</beans>
--------------------------------test.java--------------------------------
package org.example;

import org.example.service.IAccountService;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

//测试AOP的配置
public class test {
    public static void main(String[] args) {
        //1.获取容器
        ApplicationContext ac=new ClassPathXmlApplicationContext("bean.xml");
        //2.获取对象
        IAccountService accountService=ac.getBean("accountService",IAccountService.class);
        //3.执行方法
        accountService.saveAccount();
    }
}
