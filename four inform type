------------------------------------pom.xml-------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>springAOP</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>5.2.5.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.5</version>
        </dependency>
    </dependencies>
</project>
------------------------------------IAccountService.java-------------------------------------
package org.example.service;
//账户的业务层接口
public interface IAccountService {
    void saveAccount();
}
------------------------------------AccountServiceImpl.java-------------------------------------
package org.example.service.impl;

import org.example.service.IAccountService;
//账户的业务层实现类
public class AccountServiceImpl implements IAccountService {
    public void saveAccount() {
        System.out.println("执行了保存");
//        int i=1/0;
    }
}
------------------------------------Logger.java-------------------------------------
package org.example.utils;

import org.aspectj.lang.ProceedingJoinPoint;

//用于记录日志的工具类，它里面提供了公共的代码
public class Logger {
    //    用于打印日志。计划让其在切入点方法执行之前执行（切入点方法就是业务层方法）
    public void beforeLog(){
        System.out.println("Logger类中的beforeLog方法执行了");
    }
    //    用于打印日志。计划让其在切入点方法执行之后无异常执行（切入点方法就是业务层方法）
    public void printLog(){
        System.out.println("Logger类中的printLog方法执行了");
    }
    //    用于打印日志。计划让其在切入点方法执行后有异常执行（切入点方法就是业务层方法）
    public void exceptionLog(){
        System.out.println("Logger类中的exceptionLog方法执行了");
    }
    //    用于打印日志。计划让其在切入点方法执行完毕后最终执行（切入点方法就是业务层方法）
    public void afterLog(){
        System.out.println("Logger类中的afterLog方法执行了");
    }
}
------------------------------------bean.xml-------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">
<!--配置spring的Ioc-->
<!--    注入accountService对象-->
    <bean id="accountService" class="org.example.service.impl.AccountServiceImpl"></bean>
<!--    配置Logger类-->
    <bean id="logger" class="org.example.utils.Logger"></bean>
<!--    配置AOP-->
    <aop:config>
        <aop:pointcut id="pt1" expression="execution(void org.example.service.impl.AccountServiceImpl.saveAccount())"/>
        <aop:aspect id="logAdvice" ref="logger">
            <aop:before method="beforeLog" pointcut-ref="pt"></aop:before>
            <aop:after-returning method="printLog" pointcut-ref="pt"></aop:after-returning>
            <aop:after-throwing method="exceptionLog" pointcut-ref="pt"></aop:after-throwing>
            <aop:after method="afterLog" pointcut-ref="pt"></aop:after>
<!--        配置切入点表达式，id属性是唯一标识，expression属性用于指定表达式内容
                此标签写在aop:aspect标签内部表示只能当前切面使用；
                它还可以写在aop:aspect标签外部表所有切面可用。但必须写在aop:config标签内部的最前面
-->
            <aop:pointcut id="pt" expression="execution(void org.example.service.impl.AccountServiceImpl.saveAccount())"/>
        </aop:aspect>
    </aop:config>
</beans>
------------------------------------test.java-------------------------------------
package org.example;

import org.example.service.IAccountService;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

//测试AOP的配置
public class test {
    public static void main(String[] args) {
        //1.获取容器
        ApplicationContext ac=new ClassPathXmlApplicationContext("bean.xml");
        //2.获取对象
        IAccountService accountService=ac.getBean("accountService",IAccountService.class);
        //3.执行方法
        accountService.saveAccount();
    }
}
