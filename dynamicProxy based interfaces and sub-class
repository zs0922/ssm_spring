-------------------------------------pom.xml------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>proxy</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>
<!--    基于子类的动态代理需要导入坐标-->
    <dependencies>
        <dependency>
            <groupId>cglib</groupId>
            <artifactId>cglib</artifactId>
            <version>3.3.0</version>
        </dependency>
    </dependencies>
</project>
-------------------------------------IProducer.java------------------------------------
package org.example.interfaces;

public interface IProducer {
    void saleProduct(float money);
}
-------------------------------------Producer.java------------------------------------
package org.example.proxy;

import org.example.interfaces.IProducer;

public class Producer implements IProducer {
    public void saleProduct(float money) {
        System.out.println("销售产品，并拿到钱："+money);
    }
}
-------------------------------------Client.java------------------------------------
package org.example.proxy;

import org.example.interfaces.IProducer;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

public class Client {
    public static void main(String[] args) {
        final Producer producer=new Producer();
        /*
        * 动态代理：
        *   特点：字节码随用随创建，随用随加载
        *   作用：不修改源码的基础上对方法增强
        *   分类：基于接口的动态代理
        *         基于子类的动态代理
        * 基于接口的动态代理：
        *       涉及的类：Proxy
        *       提供者：JDK官方
        * 如何创建代理对象：使用Proxy类中的newProxyInstance方法
        * 创建代理对象的要求：被代理类最少实现一个接口，如果没有则不能使用
        * newProxyInstance方法的参数:
        *       ClassLoader:类加载器。用于加载代理对象的字节码的，和被代理对象使用相同的类加载器.    固定写法
        *       Class[]:字节码数组。它是用于让代理对象和被代理对象有相同方法。    固定写法
        *       InvocationHandler:用于提供增强的代码。它是让我们写如何代理，我们一般都是写该接口的实现类，通常是匿名内部类，但不是必须的。
        *                         此接口的实现类是谁用谁写。
        * */
        IProducer proxyProducer=(IProducer) Proxy.newProxyInstance(Producer.class.getClassLoader(),
                Producer.class.getInterfaces(),
                new InvocationHandler() {
                    /*作用：执行被代理对象的任何接口方法都会经过该方法
                    * 方法参数的含义：
                    *     proxy:代理对象的引用
                    *     method:当前执行的方法
                    *     args:和被代理对象有相同的返回值
                    */
                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                        //提供增强的代码
                        Object returnValue=null;
                        //1.获取方法执行的参数
                        Float money=(Float)args[0];
                        //2.判断当前方法是不是销售
                        if("saleProduct".equals(method.getName())){
                            returnValue=method.invoke(producer,money*0.8f);
                        }
                        return returnValue;
//                        return method.invoke(producer,args);
                    }
                }
        );
        proxyProducer.saleProduct(10000f);
    }
}
-------------------------------------Producer.java------------------------------------
package org.example.cglib;

import org.example.interfaces.IProducer;

public class Producer implements IProducer {
    public void saleProduct(float money) {
        System.out.println("销售产品，并拿到钱："+money);
    }
}
-------------------------------------Client.java------------------------------------
package org.example.cglib;

import net.sf.cglib.proxy.Enhancer;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;
import org.example.interfaces.IProducer;
import java.lang.reflect.Method;

public class Client {
    public static void main(String[] args) {
        final Producer producer=new Producer();
        /*
        * 动态代理：
        *   特点：字节码随用随创建，随用随加载
        *   作用：不修改源码的基础上对方法增强
        *   分类：基于接口的动态代理
        *         基于子类的动态代理
        * 基于子类的动态代理：
        *       涉及的类：Enhancer
        *       提供者：第三方cglib库
        * 如何创建代理对象：使用Enhancer类中的create方法
        * 创建代理对象的要求：被代理类不能是最终类
        * newProxyInstance方法的参数:
        *       Class:字节码。它是用于指定被代理对象的字节码
        *       Callback:用于提供增强的代码。它是让我们写如何代理，我们一般都是写该接口的实现类，通常是匿名内部类，但不是必须的。
        *                此接口的实现类是谁用谁写。
        *                我们一般写的是该接口的子接口实现类：MethodInterceptor
        * */
        Producer cglibProducer=(Producer) Enhancer.create(Producer.class, new MethodInterceptor() {
            /*
            * 执行被代理对象的任何方法都会经过该方法
            * 方法参数的含义：
            *       o（同proxy）:代理对象的引用
            *       method:当前执行的方法
            *       objects（同args）:和被代理对象有相同的返回值
            *       methodProxy:当前执行方法的代理对象
            * */
            public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {
                //提供增强的代码
                Object returnValue=null;
                //1.获取方法执行的参数
                Float money=(Float)objects[0];
                //2.判断当前方法是不是销售
                if("saleProduct".equals(method.getName())){
                    returnValue=method.invoke(producer,money*0.8f);
                }
                return returnValue;
            }
        });
        cglibProducer.saleProduct(12000f);
    }
}
